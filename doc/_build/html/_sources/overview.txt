Asterclient
###########
Asterclient is in it's usage very similar to as_run_ program. For a normal run
you will need:

* a profile_.yml file which holds the basic data about the calculations (it is
  not needed for a very simple run where specify all relevant data on the
  commandfile, this isn't supported up to now)

* several code aster commandfile_'s

* maybe some distributionfile_ if you want to run a parametric study

Motivation
**********
The motivation for writing asterclient came out of some frustration since the
as_run_ is documented quiet poorly specially on the topic of parametric
studies. I thought it should be much easier and straight forward to run a
paramtric study and in general a simple calculation.


.. _profile:

Profile
*******
The profile file is comparable to code aster export file used by as_run_ and
astk. The difference to that format is basically it's format which has to be
valid yaml_, and is hopefully easier in it's data structure.
It's main keys are:

.. confval:: project

    This specifies the projectname for the calculations and has only
    informative character and is optional.

.. confval:: srcdir

    Here you specify the source directory for the calculation, if you omit it
    it will point to the directory currently run the client and is therfore
    optional.

.. confval:: outdir

    Here you specify win which directory the calculation results should be
    saved to. Be careful, asterclient will overwrite files or directories if
    the have have same name as some results. If you specify a relative path it
    will be considered relative to the directory you run asterclient from.

.. confval:: meshfile

    The meshfile key specifies the path to the meshfile for the calculations,
    if relative to the :confval:`-srcdir` or absolute.
    
.. confval:: calculations

    This is a list of all known calculations, for example some stress
    calculation or some fatigue calculation of the same project and the same
    mesh. Every calclation needs a name and a commandfile, fr example::

        - name: "stress"
          commandfile: "stress.comm"
        - name: "fatigue"
          commandfile: "fatigue.comm"

    This will provide to calculations named stress and fatigue with the
    associated commandfiles. If you want to run some calculation which needs
    some results of some other calculation as it's input you need to specify
    the poursuite key, for example::

        - name: "post"
          commandfile: "post.comm"
          poursuite: "stress"

    This would tell asterclient that the calculation ``post`` needs the results
    of the calculation ``stress`` as it's input, of course therefore you need
    first to calculate ``stress`` before you can calculate ``post``.

    .. confval:: name

        The name of the calculation. 

    .. confval:: commandfile

        The commandfile associated with the specified calculation.

    .. confval: resultfiles

        A list of additional (in addition to the standard protocol output and
        glob.1 and pick.1) result files. You specify a file with a name and
        Logical Unit Number LU (see codeasterglossary_ under UNITE), for example::

            - example.med: 80
            - buckling.med: 81

        Which would specify two files one with the name example.med and a LU
        numbe rof 80 and one with the name buckling.med and a LU number of 81.
        They could can now be refered to in the commandfile of the calculation
        for example like::

            IMPR_RESU(FORMAT='MED',
                    UNITE=81,
                    RESU=....
                    )

            
.. confval:: distributionfile

    If you want to run a parametric study, which means that you have
    calculations which need basically the same commandfile but with different
    values, the you just specify a distributionfile with tis confval. The
    explanation on how the distributionfile needs to look like see
    distributionfile_. For information on how to use the specified parameters
    in the commandfile see commandfile_.


A full example profile of the basic example is :download:`here <../examples/basic/profile.yml>`

.. _distributionfile:

Distributionfile
****************
The distributionfile is a simple python file which can contain any valid python
code, but needs at least to provide a variable called ``parameters`` which is a
list holding the various parameters for the parametric studies. The list must
contain tuples with two entries, where the first entry is a string containing
the name of that study and as second entry a python dict containing all
parameters. It could for example look like:

.. code-block:: python

    #coding=utf-8

    parameters = [
        ('study_A',{'a':3,'b':2}),
        ('study_B',{'a':1,'b':19})
        ]

In your commandfile you could acces these variables now through ``params['a']``
or ``params['b']`` respectively, assuming that you have specified the
distributionfile correctly in the profile_.


.. _commandfile:

Commandfile
***********
This is a completely standard code aster commandfile, nothing special, except
that you can acces parameters of a parametric study like::

    params['parameter']

See distributionfile_ for more detailed information.


Basic Example
*************
For a full basic example see the examples directory `example <../../../examples>`_

.. _as_run: http://manpages.ubuntu.com/manpages/precise/man1/as_run.1.html

.. _codeasterglossary: http://www.code-aster.org/wiki/doku.php?id=en:p01_util:p120_terms

.. _yaml: http://en.wikipedia.org/wiki/YAML
